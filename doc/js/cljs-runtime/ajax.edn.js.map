{"version":3,"sources":["ajax/edn.cljc"],"mappings":";AAWA,oBAAA,pBAAMA,gDAAUC;AAAhB,AACY,6DAAA,qBAAIA,rBAAMC,tDAAMC;;AAM5B,AAAA,+BAAA,uCAAAC,tEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,2DAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6DAAA,7DAAMD;AAAN,AACM,gDAAA,2CAAA,uEAAA,oEAAA,MAAA,qEAAA,mFAAA,7XAACE,yIAA2BR;;;AADlC,CAAA,6DAAA,7DAAMM,wEAIFG;AAJJ,AAIO,OAACC;;;AAJR,CAAA,uDAAA,vDAAMJ;;AAAN,AAYA,AAAA,8BAAA,sCAAAF,pEAAMQ;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAL,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4DAAA,5DAAMK;AAAN,AAAA,kDAAA,yEAAA,qEAAA,mFAAA,zKACwBC;;;AADxB,CAAA,4DAAA,5DAAMD,uEAIFH;AAJJ,AAIO,OAACK;;;AAJR,CAAA,sDAAA,tDAAMF;;AAAN","names":["ajax.edn/edn-read","xhrio","ajax.protocols/-body","cljs.reader.read_string","var_args","G__11899","ajax.edn/edn-response-format","js/Error","ajax.interceptors/map->ResponseFormat","_","ajax.edn.edn_response_format","G__11927","ajax.edn/edn-request-format","cljs.core/pr-str","ajax.edn.edn_request_format"],"sourcesContent":["(ns ajax.edn\n  (:require [ajax.interceptors :refer [map->ResponseFormat]]\n            [ajax.protocols :refer [-body]]\n            #?@ (:cljs [[cljs.reader :as edn]]\n                 :clj [[clojure.edn :as edn]\n                       [clojure.java.io :refer [reader]]]))\n  #? (:clj (:import (java.io\n                     ByteArrayInputStream OutputStreamWriter\n                     PushbackReader InputStreamReader\n                     InputStream OutputStream))))\n\n(defn edn-read [xhrio]\n  #? (:cljs (-> xhrio -body edn/read-string)\n      :clj (-> ^InputStream (-body xhrio)\n               (InputStreamReader. \"UTF-8\")\n               PushbackReader.\n               edn/read)))\n\n(defn edn-response-format\n  ([] (map->ResponseFormat {:read edn-read\n                            :description \"EDN\"\n                            :content-type [\"application/edn\"]}))\n  ([_] (edn-response-format)))\n\n#? (:clj (defn edn-write\n           [^OutputStream writer params]\n           (binding [*out* (OutputStreamWriter. writer \"UTF-8\")]\n             (pr params)\n             (flush))))\n\n(defn edn-request-format\n  ([] {:write #? (:cljs pr-str\n                  :clj edn-write)\n       :content-type [\"application/edn\"]})\n  ([_] (edn-request-format)))\n"]}
{"version":3,"sources":["endless_ships/utils/tables.cljs"],"mappings":";AAGA;;;uCAAA,vCAAOA,sFAEJC,IAAIC;AAFP,AAGE,IAAAC,aAA0BD;IAA1BC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAAcG;WAAd,AAAAD,4CAAAF,eAAA,lEAAmBI;AAAnB,AACE,IAAAC,mBAAI,iBAAAC,oBAAKH;AAAL,AAAA,oBAAAG;AACK,OAACC,+CAAOT,IAAIK;;AADjBG;;;AAAJ,AAAA,oBAAAD;AAAAA;;AAEI,IAAAC,oBAAKF;AAAL,AAAA,oBAAAE;AACK,QAACF,qCAAAA,0CAAAA,PAAKN,sBAAAA;;AADXQ;;;;AAGR;;;;;;;qCAAA,rCAAOE,kFAMJC,YAAYX,IAAIY,QAAQC;AAN3B,AAOE,IAAAC,aAEkCH;IAFlCG,iBAAA,AAAAX,4BAAAW;aAAA,AAAAV,4CAAAU,eAAA,pEAAcC,8HACOE;YADrB,AAAAb,4CAAAU,eAAA,nEAAqBE,2HAED,WAAKE;AAAL,AAAA;;IACdC,OAAQ,AAACpB,qCAAUC,IAAIW;IACvBS,UAAQ,CAACL,uCAAAA,6CAAAA,RAAOI,yBAAAA;IAChBH,YAAQ,CAACA,sCAAAA,4CAAAA,RAAMG,wBAAAA;AALrB,AAAA,0FAAA,qDAOGH,UACAI;;AAEL;;;yCAAA,zCAAOC,0FAEJC;AAFH,AAGE,qBAAWC,bAAQD;;AAErB;;;8CAAA,9CAAOE,oGAEJF;AAFH,AAGE,OAAUA;;AAEZ;;;;;;;;;0CAAA,1CAAOG,4FAQJC,EAAEC;AARL,AASE,GACE,kCAAA,hCAAK,AAACC,wBAAQF,UACT,AAACE,wBAAQD,QACT,AAACE,6CAAE,AAACC,gBAAMJ,GAAG,AAACI,gBAAMH;AACzB,sDAAA,WAAAI,iBAAAC,3EAACC;AAAD,AAAS,IAAMC,IAAE,AAACC,kBAAQ,gBAAAH,hBAACI,kCAAU,iBAAAJ,jBAACK;AAA7B,AACE,GAAI,kDAAA,lDAACC,gDAAKJ;AACR,OAACK,kBAAQL;;AACTA;;GAHb,IAKQ,AAACM,4CAAIC,iBAAOf,EAAEC;;AATxB,GAWE,4DAAA,1DAAI,EAAK,OAASD,oBAAG,OAASC,wBAC1B,EAAK,OAASD,oBAAG,OAASC,sBAC1B,EAAK,AAACe,yBAAShB,QAAG,AAACgB,yBAASf;AAChC,OAACQ,kBAAQT,EAAEC;;AAdb,GAgBE,EAAK,AAACN,uCAAMK,QAAG,AAACL,uCAAMM;AACtB,OAACQ,kBAAQ,AAACX,4CAAiBE,GAAG,AAACF,4CAAiBG;;AAjBlD,AAoBE,OAACQ,kBAAQT,EAAEC;;;;;;AAEf;;;;qCAAA,rCAAOgB,kFAGJC,KAAKC,aAAaC;AAHrB,AAIE,OAACC,6CAAK,WAAKC,MAAMC;AAAX,AACE,OAAChB,+CACC,WAAKf,EAAEgC;AAAP,AACE,IAAMC,SAAO,iBAAAC,WAAc,AAAChB,gBAAMc;AAArB,AAAA,gGAAAE,mCAAAA,3HAACP,6CAAAA,uDAAAA;;IACRQ,YAAU,AAAChB,iBAAOa;IAClBI,SAAO,AAACvD,qCAAUiD,MAAMG;IACxBI,SAAO,AAACxD,qCAAUkD,MAAME;IACxBK,WAAS,EAAI,uDAAA,vDAAC3B,6CAAEwB,8DACL,AAAC5B,wCAAa6B,OAAOC,QACrB,AAAC9B,wCAAa8B,OAAOD;AANtC,AAOE,GAAU,cAAA,bAAOE;AAAjB;;AAAA,AACE,OAACjB,kBAAQiB;;GAVjB,IAaEV;GACJF;;AAER;;;wCAAA,xCAAOa,wFAEJzD,IAAIY;AAFP,AAGE,0DAAA,mFAAA,tIAACH,+CAAOT;;AAEV,kDAAA,2CAAA,sGAAA,iDAAA,2CAAA,uDAAA,cAAA,uFAAA,kGAAA,6EAAA,2CAAA,kDAAA,2CAAA,gDAAA,2CAAA,wDAAA,8BAAA,uDAAA,2CAAA,wDAAA,gEAAA,uDAAA,2CAAA,0EAAA,IAAA,0EAAA,v3CAAK0D,gKACWhD,wPAICiC,+FACAc","names":["endless-ships.utils.tables/cell-data","row","cell","map__28000","cljs.core/--destructure-map","cljs.core.get","path","expr","or__4223__auto__","and__4221__auto__","cljs.core.get_in","endless-ships.utils.tables/cell-fn","render-info","row-num","col-num","map__28001","format","attrs","cljs.core/identity","_","data","content","endless-ships.utils.tables/date?","d","js/Date","endless-ships.utils.tables/date-as-sortable","endless-ships.utils.tables/compare-vals","x","y","cljs.core/vector?","cljs.core._EQ_","cljs.core/count","p1__28010#","p2__28009#","cljs.core.reduce","r","cljs.core/compare","cljs.core/first","cljs.core/second","cljs.core.not_EQ_","cljs.core/reduced","cljs.core.map","cljs.core/vector","cljs.core/boolean?","endless-ships.utils.tables/sort-fn","rows","column-model","sorting","cljs.core.sort","row-x","row-y","sort","column","G__28011","direction","cell-x","cell-y","compared","endless-ships.utils.tables/row-key-fn","endless-ships.utils.tables/default-table-config"],"sourcesContent":["(ns endless-ships.utils.tables\n  (:require [reagent-table.core :as rt]))\n\n(defn- cell-data\n  \"Resolve the data within a row for a specific column\"\n  [row cell]\n  (let [{:keys [path expr]} cell]\n    (or (and path\n             (get-in row path))\n        (and expr\n             (expr row)))))\n\n(defn- cell-fn\n  \"Return the cell hiccup form for rendering.\n   the specific column from :column-model\n  - row the current row\n  - row-num the row number\n  - col-num the column number in model coordinates\"\n  [render-info row row-num col-num]\n  (let [{:keys [format attrs]\n         :or   {format identity\n                attrs (fn [_] {})}} render-info\n        data    (cell-data row render-info)\n        content (format data)\n        attrs   (attrs data)]\n    [:span\n     attrs\n     content]))\n\n(defn- date?\n  \"Returns true if the argument is a date, false otherwise.\"\n  [d]\n  (instance? js/Date d))\n\n(defn- date-as-sortable\n  \"Returns something that can be used to order dates.\"\n  [d]\n  (.getTime d))\n\n(defn- compare-vals\n  \"A comparator that works for the various types found in table structures.\n  This is a limited implementation that expects the arguments to be of\n  the same type. The :else case is to call compare, which will throw\n  if the arguments are not comparable to each other or give undefined\n  results otherwise.\n  Both arguments can be a vector, in which case they must be of equal\n  length and each element is compared in turn.\"\n  [x y]\n  (cond\n    (and (vector? x)\n         (vector? y)\n         (= (count x) (count y)))\n    (reduce #(let [r (compare (first %2) (second %2))]\n               (if (not= r 0)\n                 (reduced r)\n                 r))\n            0\n            (map vector x y))\n\n    (or (and (number? x) (number? y))\n        (and (string? x) (string? y))\n        (and (boolean? x) (boolean? y)))\n    (compare x y)\n\n    (and (date? x) (date? y))\n    (compare (date-as-sortable x) (date-as-sortable y))\n\n    :else ;; hope for the best... are there any other possiblities?\n    (compare x y)))\n\n(defn- sort-fn\n  \"Generic sort function for tabular data. Sort rows using data resolved from\n  the specified columns in the column model.\"\n  [rows column-model sorting]\n  (sort (fn [row-x row-y]\n          (reduce\n            (fn [_ sort]\n              (let [column (column-model (first sort))\n                    direction (second sort)\n                    cell-x (cell-data row-x column)\n                    cell-y (cell-data row-y column)\n                    compared (if (= direction :asc)\n                               (compare-vals cell-x cell-y)\n                               (compare-vals cell-y cell-x))]\n                (when-not (zero? compared)\n                  (reduced compared))\n                ))\n            0\n            sorting))\n        rows))\n\n(defn- row-key-fn\n  \"Return the reagent row key for the given row\"\n  [row row-num]\n  (get-in row [:name]))\n\n(def default-table-config\n  {:render-cell cell-fn\n   ;:table-state  (atom {:draggable true})\n   ;:scroll-height \"80vh\"\n   :th           {:scope \"col\"}\n   :sort         sort-fn\n   :row-key      row-key-fn\n   :column-selection {:ul {:li {:class \"btn\"}}}\n   :table {:class \"table table-hover table-striped table-bordered table-reactive\"\n           :style {:border-spacing 0\n                   :border-collapse \"separate\"}}})\n"]}
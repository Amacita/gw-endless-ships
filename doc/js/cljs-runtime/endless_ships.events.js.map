{"version":3,"sources":["endless_ships/events.cljs"],"mappings":"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","names":["endless-ships.events/initial-outfit-settings","cljs.core.reduce","p__28451","vec__28452","cljs.core.nth","map__28455","cljs.core/--destructure-map","cljs.core.get","settings","name","initial-ordering","cljs.core.assoc","endless-ships.utils.outfits/types","re_frame.core.reg_event_fx","p__28456","map__28457","db","_","cljs.core.merge","ajax.edn.edn_response_format","endless-ships.events/index-by-name","coll","p__28458","map__28459","indexed","item","endless-ships.views.utils/kebabize","endless-ships.events/group-modifications","modifications","p__28460","map__28461","grouped","modification","mod","cljs.core/assoc-in","endless-ships.events/process-outfitters","outfitters","cljs.core.map","outfitter","cljs.core.dissoc","cljs.core.update","cljs.core/set","endless-ships.events/toggle-filter","filter","value","cljs.core/not","endless-ships.events/initial-filter","values","cljs.core.into","cljs.core/sorted-map","re_frame.core.reg_event_db","p__28462","vec__28463","data","cljs.core.update_in","cljs.core/merge","cljs.core.apply","cljs.core/concat","cljs.core.keep","cljs.core/identity","p__28466","vec__28467","route","endless-ships.events/toggle-ordering","entity-type","column","p__28470","map__28471","column-name","order","cljs.core.not_EQ_","cljs.core._EQ_","p__28472","vec__28473","p__28476","vec__28477","race","p__28480","vec__28481","category","p__28484","vec__28485","license"],"sourcesContent":["(ns endless-ships.events\n  (:require [re-frame.core :as rf]\n            [day8.re-frame.http-fx]\n            [ajax.edn :as ajax]\n            [endless-ships.views.utils :refer [kebabize]]\n            [endless-ships.utils.outfits :as outfits]))\n\n(def initial-outfit-settings\n  (reduce (fn [settings [name {:keys [initial-ordering]}]]\n            (assoc settings\n                   name\n                   {:ordering initial-ordering}))\n          {}\n          outfits/types))\n\n(rf/reg-event-fx ::initialize\n                 (fn [{db :db} _]\n                   {:db {:loading? true\n                         :loading-failed? false\n                         :route [:ships {}]\n                         :ships {}\n                         :ship-modifications {}\n                         :outfits {}\n                         :outfitters []\n                         :version {}\n                         :gw-version {}\n                         :licenses {}\n                         :plugins {}\n                         :settings (merge {:ships {:ordering {:column-name \"Name\"\n                                                              :order :asc}\n                                                   :filters-collapsed? true\n                                                   :race-filter {}\n                                                   :category-filter {}\n                                                   :license-filter {}}}\n                                          initial-outfit-settings)}\n                    :http-xhrio {:method :get\n                                 :uri \"/data.edn\"\n                                 :response-format (ajax/edn-response-format)\n                                 :on-success [::data-loaded]\n                                 :on-failure [::data-failed-to-load]}}))\n\n(defn- index-by-name [coll]\n  (reduce (fn [indexed {:keys [name] :as item}]\n            (assoc indexed (kebabize name) item))\n          {}\n          coll))\n\n(defn- group-modifications [modifications]\n  (reduce (fn [grouped {:keys [name modification] :as mod}]\n            (assoc-in grouped [(kebabize name) (kebabize modification)] mod))\n          {}\n          modifications))\n\n(defn- process-outfitters [outfitters]\n  (map (fn [outfitter]\n         (-> outfitter\n             (dissoc :name)\n             (update :outfits set)))\n       outfitters))\n\n(defn- toggle-filter [filter value]\n  (update filter value not))\n\n(defn- initial-filter [values]\n  (->> values\n       (into #{})\n       (reduce toggle-filter (sorted-map))))\n\n(rf/reg-event-db ::data-loaded\n                 (fn [db [_ data]]\n                   (-> db\n                       (assoc :loading? false\n                              :ships (index-by-name (:ships data))\n                              :ship-modifications (group-modifications (:ship-modifications data))\n                              :outfits (index-by-name (:outfits data))\n                              :outfitters (process-outfitters (:outfitters data))\n                              :version (:version data)\n                              :gw-version (:gw-version data)\n                              :licenses (:licenses data)\n                              :plugins (:plugins data))\n                       (update-in [:settings :ships]\n                                  merge\n                                  {:race-filter (->> (:ships data)\n                                                     (map :race)\n                                                     initial-filter)\n                                   :category-filter (->> (:ships data)\n                                                         (map :category)\n                                                         initial-filter)\n                                   :license-filter (->> (:ships data)\n                                                        (map :licenses)\n                                                        (apply concat)\n                                                        (keep identity)\n                                                        initial-filter)}))))\n\n(rf/reg-event-db ::data-failed-to-load\n                 (fn [db _]\n                   (assoc db\n                          :loading? false\n                          :loading-failed? true)))\n\n(rf/reg-event-db ::navigate-to\n                 (fn [db [_ route]]\n                   (assoc db :route route)))\n\n(defn- toggle-ordering [db entity-type column]\n  (update-in db\n             [:settings entity-type :ordering]\n             (fn [{:keys [column-name order]}]\n               (cond\n                 (not= column-name column) {:column-name column\n                                            :order :desc}\n                 (= order :asc) {:column-name nil}\n                 :else {:column-name column\n                        :order :asc}))))\n\n(rf/reg-event-db ::toggle-ordering\n                 (fn [db [_ entity-type column]]\n                   (toggle-ordering db entity-type column)))\n\n(rf/reg-event-db ::toggle-ship-filters-visibility\n                 (fn [db]\n                   (update-in db\n                              [:settings :ships :filters-collapsed?]\n                              not)))\n\n(rf/reg-event-db ::toggle-ships-race-filter\n                 (fn [db [_ race]]\n                   (update-in db\n                              [:settings :ships :race-filter race]\n                              not)))\n\n(rf/reg-event-db ::toggle-ships-category-filter\n                 (fn [db [_ category]]\n                   (update-in db\n                              [:settings :ships :category-filter category]\n                              not)))\n\n(rf/reg-event-db ::toggle-ships-license-filter\n                 (fn [db [_ license]]\n                   (update-in db\n                              [:settings :ships :license-filter license]\n                              not)))\n"]}
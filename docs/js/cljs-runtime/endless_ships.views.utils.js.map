{"version":3,"sources":["endless_ships/views/utils.cljs"],"mappings":";AAKA,iCAAA,jCAAKA;AAEL,oCAAA,pCAAMC,gFAASC;AAAf,AACE,gCAAA,zBAACC,uBAAYD,MAAOF;;AAEtB,qCAAA,rCAAMI,kFAAUF;AAAhB,AACE,+EAAIA,vBACA,yBAAA,MAAA,/BAACC,vBACD,2DAAA,QAAA,nEAACA,1BACDE;;AAEN,uCAAA,vCAAMC,sFAAYC;AAAlB,AAAA,2BAAA,mFAAA,kEAAA,2CAAA,0JAAA,2CAAA,oDACSA,jMACe,CAAA,SAAc,mCAAA,eAAIA,fAAKC,nCAAKJ,2EACpCG;;AAEhB,0CAAA,1CAAME,4FAAeC;AAArB,AACE,GAAI,OAASA;AACX,IAAMC,uBAAYD,DACA,OAAA,lBACAE,DACA,CAAA,2BAAA;IACZC,YAAU,KAAAC,uBAAeC;AAJ/B,AAKE,OAASF,iBAAU,4CAAKF;;AAC1BD;;;AAEJ,6CAAA,7CAAMM,kGAAkBC,EAAEC,KAAKC;AAA/B,AACE,IAAMC,IAAE,CAACF,qCAAAA,wCAAAA,LAAKD,oBAAAA;AAAd,AACE,GAAM,GAAA,MAAA,LAAOG;AAAb,AACE,GAAI,OAASA;AAAb,0FAAA,gDACO,oDAAA,PAAKD,wDAAW,AAACV,wCAAcW;;AADtC,0FAAA,gDAEO,oDAAA,PAAKD,wDAAWC;;;AAHzB;;;AAKJ,8CAAA,9CAAMC,oGAAmBJ,EAAEC,KAAKC;AAAhC,AACE,IAAMC,IAAE,CAACF,qCAAAA,wCAAAA,LAAKD,oBAAAA;AAAd,AACE,GAAM,GAAA,MAAA,LAAOG;AAAb,AAAA,0FAAA,gDACO,oDAAA,uGAAA,9GAAKD,wDAAW,AAACV,wCAAc,KAAA,JAAGW;;AADzC;;;AAGJ,+CAAA,/CAAME,sGAAoBC;AAA1B,AACE,wFACK,AAACC,oDAAY,WAAKC,IAAIC,lIAGtB,AAACC,8CAAMC,hEACPC;AAJa,AAAA,oGAAA,oBAAA,mFAAA,qDAAA,mFAAA,wDAAA,mFAAA,gEAAA,2CAAA,/eACGH,miBACOD;GAHvB,AAAA,kGAAcF","names":["endless-ships.views.utils/nbsp","endless-ships.views.utils/nbspize","s","clojure.string/replace","endless-ships.views.utils/kebabize","clojure.string/lower-case","endless-ships.views.utils/race-label","race","cljs.core/name","endless-ships.views.utils/format-number","num","rounded","js/Math.round","formatter","js/goog.i18n.NumberFormat","goog.i18n.NumberFormat.Format/DECIMAL","endless-ships.views.utils/render-attribute","m","prop","label","v","endless-ships.views.utils/render-percentage","endless-ships.views.utils/render-description","entity","cljs.core.map_indexed","idx","paragraph","cljs.core.apply","cljs.core/concat","cljs.core/butlast"],"sourcesContent":["(ns endless-ships.views.utils\n  (:require [clojure.string :as str])\n  (:import (goog.i18n NumberFormat)\n           (goog.i18n.NumberFormat Format)))\n\n(def nbsp \"\\u00a0\")\n\n(defn nbspize [s]\n  (str/replace s #\" \" nbsp))\n\n(defn kebabize [s]\n  (-> s\n      (str/replace #\"\\s+\" \"-\")\n      (str/replace #\"[\\?']\" \"\")\n      str/lower-case))\n\n(defn race-label [race]\n  ^{:key race} [:span.label\n                {:class (str \"label-\" (-> race name kebabize))}\n                race])\n\n(defn format-number [num]\n  (if (number? num)\n    (let [rounded (-> num\n                      (* 10)\n                      js/Math.round\n                      (/ 10))\n          formatter (NumberFormat. Format/DECIMAL)]\n      (.format formatter (str rounded)))\n    num))\n\n(defn render-attribute [m prop label]\n  (let [v (prop m)]\n    (when (some? v)\n      (if (number? v)\n        [:li (str label \": \" (format-number v))]\n        [:li (str label \": \" v)]))))\n\n(defn render-percentage [m prop label]\n  (let [v (prop m)]\n    (when (some? v)\n      [:li (str label \": \" (format-number (* v 100)) \"%\")])))\n\n(defn render-description [entity]\n  (->> (:description entity)\n       (map-indexed (fn [idx paragraph]\n                      [paragraph\n                       ^{:key idx} [:span [:br] [:br]]]))\n       (apply concat)\n       butlast))\n"]}
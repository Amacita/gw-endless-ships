{"version":3,"sources":["endless_ships/utils/outfits.cljs"],"mappings":"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","names":["endless-ships.utils.outfits/damage","damage-type","gun","cljs.core.get_in","endless-ships.utils.outfits/types","cljs.core/PersistentArrayMap","p1__30234#","p1__30236#","p1__30238#","p1__30241#","p1__30243#","p1__30246#","p1__30248#","p1__30250#","p1__30252#","p1__30257#","p1__30262#","p1__30267#","p1__30271#","cljs.core/contains?","p1__30235#","p1__30237#","p1__30239#","energy-generation","cljs.core.get","p1__30240#","and__4221__auto__","G__30273","fexpr__30272","p1__30242#","p1__30244#","total-cooling","p1__30245#","p1__30247#","p1__30249#","p1__30251#","cljs.core._EQ_","p1__30253#","p1__30254#","p1__30255#","p1__30256#","cljs.core.partial","p1__30258#","p1__30259#","p1__30260#","p1__30261#","p1__30263#","p1__30264#","p1__30265#","p1__30266#","p1__30268#","p1__30269#","p1__30270#","endless-ships.utils.outfits/columns-for","type","cljs.core.conj","cljs.core.concat","cljs.core.apply","cljs.core/concat","cljs.core/array-map"],"sourcesContent":["(ns endless-ships.utils.outfits)\n\n(defn- damage [damage-type gun]\n  (get-in gun [:weapon damage-type :per-second]))\n\n(def types\n  (array-map :thrusters {:header \"Thrusters\"\n                         :filter #(contains? % :thrust)\n                         :initial-ordering {:column-name \"Thrust per space\"\n                                            :order :desc}\n                         :columns (array-map \"Outfit sp.\"       {:value :outfit-space}\n                                             \"Thrust\"           {:value :thrust}\n                                             \"Thrust per space\" {:value #(/ (:thrust %)\n                                                                            (:outfit-space %))}\n                                             \"Thr. energy\"      {:value :thrusting-energy}\n                                             \"Thr. heat\"        {:value :thrusting-heat})}\n             :steerings {:header \"Steerings\"\n                         :filter #(contains? % :turn)\n                         :initial-ordering {:column-name \"Turn per space\"\n                                            :order :desc}\n                         :columns (array-map \"Outfit sp.\"     {:value :outfit-space}\n                                             \"Turn\"           {:value :turn}\n                                             \"Turn per space\" {:value #(/ (:turn %)\n                                                                          (:outfit-space %))}\n                                             \"Turn. energy\"   {:value :turning-energy}\n                                             \"Turn. heat\"     {:value :turning-heat})}\n             :reactors {:header \"Reactors\"\n                        :filter #(or (contains? % :energy-generation)\n                                     (contains? % :solar-collection))\n                        :initial-ordering {:column-name \"Energy per space\"\n                                           :order :desc}\n                        :columns (let [energy-generation #(+ (get % :energy-generation 0)\n                                                             (get % :solar-collection 0))]\n                                   (array-map \"Outfit sp.\"        {:value :outfit-space}\n                                              \"Energy generation\" {:value energy-generation}\n                                              \"Energy per space\"  {:value #(/ (energy-generation %)\n                                                                              (:outfit-space %))}\n                                              \"Heat generation\"   {:value :heat-generation}))}\n             :batteries {:header \"Batteries\"\n                         :filter #(and (contains? % :energy-capacity)\n                                       (#{\"Power\" \"Systems\"} (:category %)))\n                         :initial-ordering {:column-name \"Energy per space\"\n                                            :order :desc}\n                         :columns (array-map \"Outfit sp.\"       {:value :outfit-space}\n                                             \"Energy capacity\"  {:value :energy-capacity}\n                                             \"Energy per space\" {:value #(/ (:energy-capacity %)\n                                                                            (:outfit-space %))})}\n             :coolers {:header \"Coolers\"\n                       :filter #(or (contains? % :cooling)\n                                    (contains? % :active-cooling))\n                       :initial-ordering {:column-name \"Cooling per space\"\n                                          :order :desc}\n                       :columns (let [total-cooling #(+ (get % :cooling 0)\n                                                        (get % :active-cooling 0))]\n                                  (array-map \"Outfit sp.\"        {:value :outfit-space}\n                                             \"Cooling\"           {:value total-cooling}\n                                             \"Cooling per space\" {:value #(/ (total-cooling %)\n                                                                             (:outfit-space %))}\n                                             \"Cooling energy\"    {:value :cooling-energy}))}\n             :shields {:header \"Shield generators\"\n                       :filter #(contains? % :shield-generation)\n                       :initial-ordering {:column-name \"Shield per space\"\n                                          :order :desc}\n                       :columns (array-map \"Outfit sp.\"        {:value :outfit-space}\n                                           \"Shield generation\" {:value :shield-generation}\n                                           \"Shield per space\"  {:value #(/ (:shield-generation %)\n                                                                           (:outfit-space %))}\n                                           \"Shield energy\"     {:value :shield-energy}\n                                           \"Shield heat\"       {:value :shield-heat})}\n             :hull-repair {:header \"Hull repair modules\"\n                           :filter #(contains? % :hull-repair-rate)\n                           :initial-ordering {:column-name \"Hull per space\"\n                                              :order :desc}\n                           :columns (array-map \"Outfit sp.\"       {:value :outfit-space}\n                                               \"Hull repair rate\" {:value :hull-repair-rate}\n                                               \"Hull per space\"   {:value #(/ (:hull-repair-rate %)\n                                                                              (:outfit-space %))}\n                                               \"Hull energy\"      {:value :hull-energy}\n                                               \"Hull heat\"        {:value :hull-heat})}\n             :ramscoops {:header \"Ramscoops\"\n                         :filter #(contains? % :ramscoop)\n                         :initial-ordering {:column-name \"Ramscoop per space\"\n                                            :order :desc}\n                         :columns (array-map \"Outfit sp.\"         {:value :outfit-space}\n                                             \"Ramscoop\"           {:value :ramscoop}\n                                             \"Ramscoop per space\" {:value #(/ (:ramscoop %)\n                                                                              (:outfit-space %))})}\n             :guns {:header \"Guns\"\n                    :filter #(= (:category %) \"Guns\")\n                    :initial-ordering {:column-name \"Shield damage / space\"\n                                       :order :desc}\n                    :columns (array-map \"Outfit sp.\"            {:value :outfit-space}\n                                        \"Shield damage\"         {:value (partial damage :shield-damage)}\n                                        \"Shield damage / space\" {:value #(/ (damage :shield-damage %)\n                                                                            (:outfit-space %))}\n                                        \"Hull damage\"           {:value (partial damage :hull-damage)}\n                                        \"Hull damage / space\"   {:value #(/ (damage :hull-damage %)\n                                                                            (:outfit-space %))}\n                                        \"Range\"                 {:value #(get-in % [:weapon :range])}\n                                        \"Fire rate\"             {:value #(get-in % [:weapon :shots-per-second])\n                                                                 :orderable? false})}\n             :secondary {:header \"Secondary weapons\"\n                         :filter #(= (:category %) \"Secondary Weapons\")\n                         :initial-ordering {:column-name \"Shield damage / space\"\n                                            :order :desc}\n                         :columns (array-map \"Outfit sp.\"            {:value :outfit-space}\n                                             \"Shield damage\"         {:value (partial damage :shield-damage)}\n                                             \"Shield damage / space\" {:value #(/ (damage :shield-damage %)\n                                                                                 (:outfit-space %))}\n                                             \"Hull damage\"           {:value (partial damage :hull-damage)}\n                                             \"Hull damage / space\"   {:value #(/ (damage :hull-damage %)\n                                                                                 (:outfit-space %))}\n                                             \"Range\"                 {:value #(get-in % [:weapon :range])}\n                                             \"Fire rate\"             {:value #(get-in % [:weapon :shots-per-second])\n                                                                      :orderable? false})}\n             :turrets {:header \"Turrets\"\n                       :filter #(and (= (:category %) \"Turrets\")\n                                     (or (some? (damage :shield-damage %))\n                                         (some? (damage :hull-damage %))))\n                       :initial-ordering {:column-name \"Shield damage / space\"\n                                          :order :desc}\n                       :columns (array-map \"Outfit sp.\"            {:value :outfit-space}\n                                           \"Shield damage\"         {:value (partial damage :shield-damage)}\n                                           \"Shield damage / space\" {:value #(/ (damage :shield-damage %)\n                                                                               (:outfit-space %))}\n                                           \"Hull damage\"           {:value (partial damage :hull-damage)}\n                                           \"Hull damage / space\"   {:value #(/ (damage :hull-damage %)\n                                                                               (:outfit-space %))}\n                                           ;\"Firing energy\"         {:value #(get-in % [:weapon :firing-energy :per-second])}\n                                           ;\"Firing heat\"           {:value #(get-in % [:weapon :firing-heat :per-second])}\n                                           \"Range\"                 {:value #(get-in % [:weapon :range])}\n                                           \"Fire rate\"             {:value #(get-in % [:weapon :shots-per-second])\n                                                                    :orderable? false})}\n             :anti-missile {:header \"Anti-missile turrets\"\n                            :filter #(-> % :weapon (contains? :anti-missile))\n                            :initial-ordering {:column-name \"Anti-missile\"\n                                               :order :desc}\n                            :columns (array-map \"Outfit sp.\"   {:value :outfit-space}\n                                                \"Anti-missile\" {:value #(get-in % [:weapon :anti-missile])}\n                                                \"Range\"        {:value #(get-in % [:weapon :range])}\n                                                \"Fire rate\"    {:value #(get-in % [:weapon :shots-per-second])\n                                                                :orderable? false})}\n             :hand-to-hand {:header \"Hand to Hand\"\n                            :filter #(= (:category %) \"Hand to Hand\")\n                            :initial-ordering {:column-name \"Capture attack\"\n                                               :order :desc}\n                            :columns (array-map \"Capture attack\"  {:value :capture-attack}\n                                                \"Capture defense\" {:value :capture-defense}\n                                                \"Illegal\"         {:value :illegal})}))\n\n(defn columns-for [type]\n  (->> (conj (get-in types [type :columns])\n             [\"Licenses\" {:value :licenses\n                          :orderable? false}])\n       (concat [[\"Name\" {:value :name}]\n                [\"Race\" {:value :race}]\n                [\"Cost\" {:value :cost}]])\n       (apply concat)\n       (apply array-map)))\n"]}
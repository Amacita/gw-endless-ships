{"version":3,"sources":["endless_ships/views/ship_page.cljs"],"mappings":"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","names":["p__27312","vec__27313","cljs.core.nth","endless-ships.views.ship-page/render-licenses","license1","license2","endless-ships.views.ship-page/image-url","ship","suffix","cljs.core._EQ_","cljs.core/contains?","cljs.core/last","filename","cljs.core/first","js/window.encodeURI","endless-ships.views.ship-page/ship-modifications","ship-name","selected-modification-slug","modification-names","endless-ships.routes/ship-link","iter__4622__auto__","s__27331","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4620__auto__","size__4621__auto__","cljs.core/count","b__27333","cljs.core/chunk-buffer","i__27332","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__27330","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","modification-name","endless-ships.views.utils/kebabize","endless-ships.routes/ship-modification-link","endless-ships.views.ship-page/outfit-categories","endless-ships.views.ship-page/outfit-item","name","quantity","link","endless-ships.routes/outfit-link","endless-ships.views.ship-page/outfits-list","outfits","items","cljs.core.map","category","header","cljs.core.get","p1__27339#","cljs.core.sort_by","cljs.core.get_in","p__27340","map__27341","cljs.core/--destructure-map","outfit","cljs.core.keep","cljs.core/identity","endless-ships.views.ship-page/ship-page","ship-modification","cljs.core/deref","G__27343","re-frame.core/subscribe","G__27344","G__27345","selected-modification","G__27346","ship-with-modification","cljs.core.merge","ship-outfits","p__27347","map__27348","p1__27342#","cljs.core/group-by","endless-ships.views.utils/render-attribute","endless-ships.utils.ships/total-cost","endless-ships.utils.ships/or-zero","endless-ships.views.utils/render-percentage","endless-ships.views.utils/render-description","cljs.core/chunk-first"],"sourcesContent":["(ns endless-ships.views.ship-page\n  (:require [re-frame.core :as rf]\n            [endless-ships.subs :as subs]\n            [endless-ships.views.utils :refer [render-attribute render-percentage\n                                               render-description nbspize kebabize]]\n            [endless-ships.utils.ships :refer [total-cost or-zero]]\n            [endless-ships.routes :as routes]))\n\n(defn- render-licenses [[license1 license2]]\n  (if (some? license2)\n    [:p.italic (str \"This ship requires \" license1 \" and \" license2 \" licenses.\")]\n    [:p.italic (str \"This ship requires a \" license1 \" license.\")]))\n\n(defn- image-url [ship]\n  (let [suffix (cond\n                 (= (:name ship) \"Shuttle\")\n                 \"=0.png\"\n\n                 (and (= (:name ship) \"Void Sprite\")\n                      (not (contains? ship :modification)))\n                 \"-00.png\"\n\n                 (= (:name ship) \"Maeri'het\")\n                 \"-00.png\"\n\n                 (last (:sprite ship))\n                 \"-0.png\"\n\n                 :else\n                 \".png\")\n        filename (-> ship\n                     :sprite\n                     first\n                     js/window.encodeURI\n                     (str suffix))]\n    (str \"/images/\" filename)))\n\n(defn ship-modifications [ship-name selected-modification-slug modification-names]\n  [:div.panel.panel-default\n   [:div.panel-heading \"Modifications\"]\n   [:div.panel-body\n    [:ul.nav.nav-pills.nav-stacked\n     [:li {:role \"presentation\"\n           :class (when (nil? selected-modification-slug) \"active\")}\n      (routes/ship-link ship-name)]\n     (for [modification-name modification-names]\n       ^{:key modification-name}\n       [:li {:role \"presentation\"\n             :class (when (= (kebabize modification-name) selected-modification-slug) \"active\")}\n        (routes/ship-modification-link ship-name modification-name)])]]])\n\n(def outfit-categories\n  [\"Guns\"\n   \"Turrets\"\n   \"Secondary Weapons\"\n   \"Ammunition\"\n   \"Systems\"\n   \"Power\"\n   \"Engines\"\n   \"Hand to Hand\"\n   \"Special\"])\n\n(defn outfit-item [name quantity]\n  (let [link (routes/outfit-link name)]\n    (if (= quantity 1)\n      [:li.list-group-item link]\n      [:li.list-group-item [:span.badge quantity] link])))\n\n(defn outfits-list [outfits]\n  (let [items (->> outfit-categories\n                   (map (fn [category]\n                          (when (contains? outfits category)\n                            (let [header ^{:key category} [:span.list-group-item.disabled category]\n                                  items (->> (get outfits category)\n                                             (sort-by #(get-in % [:outfit :name]))\n                                             (map (fn [{:keys [outfit quantity]}]\n                                                    ^{:key (:name outfit)}\n                                                    [outfit-item (:name outfit) quantity])))]\n                              (cons header items)))))\n                   (keep identity))]\n    [:ul.list-group items]))\n\n(defn ship-page [ship-name ship-modification]\n  (let [ship @(rf/subscribe [::subs/ship ship-name])\n        outfits @(rf/subscribe [::subs/outfits])\n        modification-names @(rf/subscribe [::subs/ship-modifications-names ship-name])\n        selected-modification (if (some? ship-modification)\n                                @(rf/subscribe [::subs/ship-modification ship-name ship-modification])\n                                {})\n        ship-with-modification (merge ship selected-modification)\n        ship-outfits (->> (:outfits ship-with-modification)\n                          (map (fn [{:keys [name quantity]}]\n                                 (let [outfit (get outfits (kebabize name))]\n                                   {:outfit outfit\n                                    :quantity quantity})))\n                          (group-by #(get-in % [:outfit :category])))]\n    [:div.app\n     [:div.row\n      [:div.col-md-6\n       [:div.panel.panel-default\n        [:div.panel-heading (:name ship)]\n        [:div.panel-body\n         [:div.media\n          [:div.media-body\n           [:ul\n            (render-attribute ship-with-modification total-cost \"cost\")\n            (render-attribute ship-with-modification :shields \"shields\")\n            (render-attribute ship-with-modification :hull \"hull\")\n            (render-attribute ship-with-modification :mass \"mass\")\n            (render-attribute ship-with-modification :cargo-space \"cargo space\")\n            (render-attribute ship-with-modification :required-crew \"required crew\")\n            (render-attribute ship-with-modification :bunks \"bunks\")\n            (render-attribute ship-with-modification :fuel-capacity \"fuel capacity\")\n            (render-attribute ship-with-modification :outfit-space \"outfit space\")\n            (render-attribute ship-with-modification :weapon-capacity \"weapon capacity\")\n            (render-attribute ship-with-modification :engine-capacity \"engine capacity\")\n            (render-attribute ship-with-modification (or-zero :guns) \"guns\")\n            (render-attribute ship-with-modification (or-zero :turrets) \"turrets\")\n            (when (pos? (:drones ship-with-modification))\n              (render-attribute ship-with-modification :drones \"drones\"))\n            (when (pos? (:fighters ship-with-modification))\n              (render-attribute ship-with-modification :fighters \"fighters\"))\n            (render-attribute ship-with-modification :ramscoop \"ramscoop\")\n            (render-attribute ship-with-modification :cloak \"cloak\")\n            (render-percentage ship-with-modification :self-destruct \"self-destruct\")]\n           (when (some? (:licenses ship-with-modification))\n             (render-licenses (:licenses ship-with-modification)))]\n          [:div.media-right\n           [:img.ship-sprite {:src (image-url ship-with-modification)}]]]]]\n       (when (seq modification-names)\n         (ship-modifications (:name ship) ship-modification modification-names))]\n      [:div.col-md-6\n       [:div.panel.panel-default\n        [:div.panel-heading \"Default outfits\"]\n        [:div.panel-body (outfits-list ship-outfits)]]]]\n     (when (seq (:description ship-with-modification))\n       [:div.row\n        [:div.col-md-12\n         [:div.well\n          (render-description ship-with-modification)]]])]))\n"]}
{"version":3,"sources":["endless_ships/subs.cljs"],"mappings":";AAMA,IAAAA,iBAAA;IAAAC,iBACY,WAAKE;AAAL,AACE,OAAA,2FAAWA;;AAFzB,AAAA,2GAAAH,eAAAC,kDAAAD,eAAAC,1LAACC,sDAAAA,qFAAAA;AAID,IAAAE,iBAAA;IAAAC,iBACY,WAAKF;AAAL,AACE,OAAA,yGAAkBA;;AAFhC,AAAA,2GAAAC,eAAAC,kDAAAD,eAAAC,1LAACH,sDAAAA,qFAAAA;AAID,IAAAI,iBAAA;IAAAC,iBACY,WAAKJ;AAAL,AACE,OAAA,oFAAQA;;AAFtB,AAAA,2GAAAG,eAAAC,kDAAAD,eAAAC,1LAACL,sDAAAA,qFAAAA;AAID,IAAAM,iBAAA;IAAAC,iBACY,WAAKN;AAAL,AACE,sBAAA,AAAA,qFAAIA,pGAAUO;;AAF5B,AAAA,2GAAAF,eAAAC,kDAAAD,eAAAC,1LAACP,sDAAAA,qFAAAA;AAID,IAAAS,iBAAA;IAAAC,iBACY,WAAKT;AAAL,AACE,yDAAA,mFAAA,6DAAA,uDAAA,zPAACU,+CAAOV;;AAFtB,AAAA,2GAAAQ,eAAAC,kDAAAD,eAAAC,1LAACV,sDAAAA,qFAAAA;AAID,IAAAY,iBAAA;IAAAC,iBACY,WAAKZ;AAAL,AACE,yDAAA,mFAAA,6DAAA,uDAAA,zPAACU,+CAAOV;;AAFtB,AAAA,2GAAAW,eAAAC,kDAAAD,eAAAC,1LAACb,sDAAAA,qFAAAA;AAID,IAAAc,iBAAA;IAAAC,iBACY,WAAKd;AAAL,AACE,yDAAA,mFAAA,6DAAA,uDAAA,zPAACU,+CAAOV;;AAFtB,AAAA,2GAAAa,eAAAC,kDAAAD,eAAAC,1LAACf,sDAAAA,qFAAAA;AAID,IAAAgB,iBAAA;IAAAC,iBACY,WAAKhB;AAAL,AACE,yDAAA,mFAAA,6DAAA,uDAAA,zPAACU,+CAAOV;;AAFtB,AAAA,2GAAAe,eAAAC,kDAAAD,eAAAC,1LAACjB,sDAAAA,qFAAAA;AAID,IAAAkB,iBAAA;IAAAC,iBACY,WAAKlB;AAAL,AACE,yDAAA,mFAAA,6DAAA,uDAAA,zPAACU,+CAAOV;;AAFtB,AAAA,2GAAAiB,eAAAC,kDAAAD,eAAAC,1LAACnB,sDAAAA,qFAAAA;AAID,wCAAA,xCAAOoB,wFAAoBC,QAAQC,SAASC;AAA5C,AACE,IAAMC,gBAAc,uDAAA,6LAAA,pPAACb,+CAAOU,2FAAS,AAAA,gGAAcC;AAAnD,AACE,OAACG,6CAAK,EAAI,GAAA,8GAAA,7GAAO,AAAA,gGAAcH,sBACvB,WAAKI,MAAMC;AAAX,AACE,IAAMC,aAAW,CAACJ,8CAAAA,qDAAAA,TAAcE,iCAAAA;IAC1BG,aAAW,CAACL,8CAAAA,qDAAAA,TAAcG,iCAAAA;AADhC,AAEE,GAAI,6IAAA,7IAACG,6CAAE,AAAA,sFAAQR;AACb,OAACS,kBAAQH,WAAWC;;AACpB,OAACE,kBAAQF,WAAWD;;GAC1B,qBAAA,rBAACI,2BACHT;;AAEV,IAAAU,iBAAA;IAAAC,iBACY;AAAA,AAAA,0FACG,iBAAAE,WAAA,mFAAA;AAAA,AAAA,sHAAAA,8CAAAA,5JAACC,wDAAAA,kEAAAA;KACD,iBAAAC,WAAA,mFAAA;AAAA,AAAA,sHAAAA,8CAAAA,5JAACD,wDAAAA,kEAAAA;KACD,iBAAAE,WAAA,mFAAA;AAAA,AAAA,sHAAAA,8CAAAA,5JAACF,wDAAAA,kEAAAA;KACD,iBAAAG,WAAA,mFAAA;AAAA,AAAA,sHAAAA,8CAAAA,5JAACH,wDAAAA,kEAAAA;KACD,iBAAAI,WAAA,mFAAA;AAAA,AAAA,sHAAAA,8CAAAA,5JAACJ,wDAAAA,kEAAAA;;;IANhBF,iBAOY,WAAAO;AAAA,AAAA,IAAAC,aAAAD;gBAAA,AAAAE,4CAAAD,WAAA,IAAA,vEAAME;eAAN,AAAAD,4CAAAD,WAAA,IAAA,tEAAgBrB;kBAAhB,AAAAsB,4CAAAD,WAAA,IAAA,zEAAyBG;sBAAzB,AAAAF,4CAAAD,WAAA,IAAA,7EAAqCI;qBAArC,AAAAH,4CAAAD,WAAA,IAAA,5EAAqDK;AAArD,yLAEO,AAACC,+CAAO,WAAKC,3IAMb,AAAC9B,sCAAmBoC,kCAAclC,hLAClC,mDAAA,5CAACmC;AAPO,AACE,IAAAN,oBAAK,AAACC,4CAAIN,YAAY,AAAA,kFAAOI;AAA7B,AAAA,oBAAAC;AAAA,IAAAA,wBACK,AAACC,4CAAIL,gBAAgB,AAAA,2FAAWG;AADrC,AAAA,oBAAAC;AAEK,OAACE,yBAAS,WAAKC;AAAL,AACE,OAACC,cAAI,AAACH,4CAAIJ,eAAeM;GAC3B,iDAAA,4DAAA,7GAACF,4CAAIF;;AAJpBC;;;AAAAA;;GAFVN;;AARnB,AAAA,2GAAAZ,eAAAC,eAAAC,kDAAAF,eAAAC,eAAAC,xNAACnC,sDAAAA,oGAAAA;AAkBD,IAAA0D,iBAAA;IAAAC,iBACY,cAAAC,HAAK3D;AAAL,AAAA,IAAA4D,aAAAD;QAAA,AAAAhB,4CAAAiB,WAAA,IAAA,/DAASC;WAAT,AAAAlB,4CAAAiB,WAAA,IAAA,lEAAWE;AAAX,AACE,yDAAA,mFAAA,rIAACpD,+CAAOV,6IAAW,AAAC+D,mCAASD;;AAF3C,AAAA,2GAAAL,eAAAC,kDAAAD,eAAAC,1LAAC3D,sDAAAA,qFAAAA;AAID,IAAAiE,iBAAA;IAAAC,iBACY,WAAKjE;AAAL,AACE,OAAA,0FAAUA;;AAFxB,AAAA,2GAAAgE,eAAAC,kDAAAD,eAAAC,1LAAClE,sDAAAA,qFAAAA;AAID,IAAAmE,iBAAA;IAAAC,iBACY,cAAAC,HAAKpE;AAAL,AAAA,IAAAqE,aAAAD;QAAA,AAAAzB,4CAAA0B,WAAA,IAAA,/DAASR;gBAAT,AAAAlB,4CAAA0B,WAAA,IAAA,vEAAWC;AAAX,sIACO,kDAAA,mFAAA,rIAAC5D,+CAAOV,uKAAwBsE,rOAChC/D,vHACA,mDAAA,oEAAA,hHAACiD;;AAJpB,AAAA,2GAAAU,eAAAC,kDAAAD,eAAAC,1LAACpE,sDAAAA,qFAAAA;AAMD,IAAAwE,iBAAA;IAAAC,iBACY,cAAAC,HAAKzE;AAAL,AAAA,IAAA0E,aAAAD;QAAA,AAAA9B,4CAAA+B,WAAA,IAAA,/DAASb;gBAAT,AAAAlB,4CAAA+B,WAAA,IAAA,vEAAWJ;wBAAX,AAAA3B,4CAAA+B,WAAA,IAAA,/EAAqBC;AAArB,AACE,yDAAA,mFAAA,rIAACjE,+CAAOV,uKAAwBsE,UAAUK;;AAFxD,AAAA,2GAAAJ,eAAAC,kDAAAD,eAAAC,1LAACzE,sDAAAA,qFAAAA;AAID,IAAA6E,iBAAA;IAAAC,iBACY,cAAAC,HAAK9E;AAAL,AAAA,IAAA+E,aAAAD;QAAA,AAAAnC,4CAAAoC,WAAA,IAAA,/DAASlB;WAAT,AAAAlB,4CAAAoC,WAAA,IAAA,lEAAWjB;AAAX,AACE,yDAAA,mFAAA,rIAACpD,+CAAOV,kJAAa,AAAC+D,mCAASD;;AAF7C,AAAA,2GAAAc,eAAAC,kDAAAD,eAAAC,1LAAC9E,sDAAAA,qFAAAA;AAID,IAAAiF,iBAAA;IAAAC,iBACY,cAAAC,HAAKlF;AAAL,AAAA,IAAAmF,aAAAD;QAAA,AAAAvC,4CAAAwC,WAAA,IAAA,/DAAStB;WAAT,AAAAlB,4CAAAwC,WAAA,IAAA,lEAAWrB;AAAX,AAeO,OAAC+B,gDAAQ,AAACC,6CAAK,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;eAAA,AAAA7C,4CAAA6C,eAAA,tEAAaE;AAAb,AACE,UAAGA;GACL,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAH,4BAAAG;gBAAA,AAAAjD,4CAAAiD,eAAA,vEAAa9B;wBAAb,AAAAnB,4CAAAiD,eAAA,/EAAuBC;AAAvB,AACE,IAAAC,mBAAID;AAAJ,AAAA,oBAAAC;AAAAA;;AAAsBhC;;IAbvC,AAACgB,+CAAO,WAAKC,cAActC;AAAnB,AACE,IAAAuC,qBAAqB,gBACK,+CAAA,WAAAE,1DAAC1C,hBACD2C;AADA,AAAS,OAAC9D,6CAAE,AAAA,mFAAA6D,kBAAU5B;GADtB,AAAA,0FAAUb;AAApC,AAAA,oBAAAuC;AAAA,kBAAAA,dAASC;AAAT,AAGE,kEAAA,2CAAA,wJAAA,sLAAA,pbAACG,6CAAKL,wHACY,AAAA,mFAAOtC,oFACC,AAAA,kGAAeA,oEACxB,AAAA,4FAAWwC;;AAC5BF;;oCAZZ,AAACH,+CAAO,eAAA,AAAA,qFAAIpF,pGAAUO,+OACT,AAAA,+GAAqBP,9HACrBO,vHACA,uHAAA,vHAAC8E,sDAAO9E,/OACrB;;AANnB,AAAA,2GAAAyE,eAAAC,kDAAAD,eAAAC,1LAAClF,sDAAAA,qFAAAA;AAqBD,IAAAwG,iBAAA;IAAAC,iBACY,cAAAC,HAAKzG;AAAL,AAAA,IAAA0G,aAAAD;QAAA,AAAA9D,4CAAA+D,WAAA,IAAA,/DAAS7C;WAAT,AAAAlB,4CAAA+D,WAAA,IAAA,lEAAW5C;AAAX,8VAEO,AAACd,+CAAO,WAAA2D,7NAER,sDAAA,tDAACtB,/EACD,6CAAA,7CAACyB,5GACD,uDAAA,hDAACjB;AAJO,AAAA,IAAAe,aAAAD;IAAAC,iBAAA,AAAAX,4BAAAW;cAAA,AAAAzD,4CAAAyD,eAAA,rEAAaC;AAAb,AACE,QAACA,wCAAAA,8CAAAA,RAAQ/C,0BAAAA;GAFnB,AAAA,6FAAa9D;;AAFhC,AAAA,2GAAAuG,eAAAC,kDAAAD,eAAAC,1LAACzG,sDAAAA,qFAAAA;AASD,IAAAgH,iBAAA;IAAAC,iBACY,cAAAC,HAAKjH;AAAL,AAAA,IAAAkH,aAAAD;QAAA,AAAAtE,4CAAAuE,WAAA,IAAA,/DAASrD;kBAAT,AAAAlB,4CAAAuE,WAAA,IAAA,zEAAWC;AAAX,AACE,yDAAA,mFAAA,yEAAA,9MAACzG,+CAAOV,mJAAcmH;;AAFpC,AAAA,2GAAAJ,eAAAC,kDAAAD,eAAAC,1LAACjH,sDAAAA,qFAAAA;AAID,IAAAqH,iBAAA;IAAAC,iBACY,WAAAE;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA5E,4CAAA6E,WAAA,IAAA,/DAAM3D;kBAAN,AAAAlB,4CAAA6E,WAAA,IAAA,zEAAQL;AAAR,AAAA,0FACG,iBAAAM,WAAA,mFAAA;AAAA,AAAA,sHAAAA,8CAAAA,5JAACrF,wDAAAA,kEAAAA;KACD,iBAAAsF,WAAA,mFAAA,iHAAkCP;AAAlC,AAAA,sHAAAO,8CAAAA,5JAACtF,wDAAAA,kEAAAA;;;IAHhBkF,iBAIY,WAAAK,SAAAC;AAAA,AAAA,IAAAC,aAAAF;cAAA,AAAAhF,4CAAAkF,WAAA,IAAA,rEAAMhB;eAAN,AAAAlE,4CAAAkF,WAAA,IAAA,tEAAcxG;IAAdyG,aAAAF;QAAA,AAAAjF,4CAAAmF,WAAA,IAAA,/DAAyBjE;kBAAzB,AAAAlB,4CAAAmF,WAAA,IAAA,zEAA2BX;AAA3B,6eACO,AAAC5G,eAAKsG,hTACN,AAAC7D,+CAAO,iFAAA,+FAAA,hLAACtC,+CAAOqH,qHAAeZ,vTAC/B,AAAChG,sCAAmB,AAAC6G,wCAAoBb,aAAa9F,nMACtD,mDAAA,5CAACmC;;AARpB,AAAA,2GAAA4D,eAAAC,eAAAC,kDAAAF,eAAAC,eAAAC,xNAACvH,sDAAAA,oGAAAA;AAUD,IAAAkI,iBAAA;IAAAC,iBACY,WAAAE;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAzF,4CAAA0F,WAAA,IAAA,/DAAMxE;kBAAN,AAAAlB,4CAAA0F,WAAA,IAAA,zEAAQlB;AAAR,AAAA,0FACG,iBAAAmB,WAAA,mFAAA;AAAA,AAAA,sHAAAA,8CAAAA,5JAAClG,wDAAAA,kEAAAA;KACD,iBAAAmG,WAAA,mFAAA,iHAAkCpB;AAAlC,AAAA,sHAAAoB,8CAAAA,5JAACnG,wDAAAA,kEAAAA;;;IAHhB+F,iBAIY,WAAAK,SAAAC;AAAA,AAAA,IAAAC,aAAAF;cAAA,AAAA7F,4CAAA+F,WAAA,IAAA,rEAAM7B;eAAN,AAAAlE,4CAAA+F,WAAA,IAAA,tEAAcrH;IAAdsH,aAAAF;QAAA,AAAA9F,4CAAAgG,WAAA,IAAA,/DAAyB9E;kBAAzB,AAAAlB,4CAAAgG,WAAA,IAAA,zEAA2BxB;AAA3B,4YACO,AAAC5G,eAAKsG,hTACN,AAAC7D,+CAAO,iFAAA,+FAAA,hLAACtC,+CAAOqH,qHAAeZ,9TAC/B,OAAChG,sCAAmB,AAAC6G,wCAAoBb,aAAa9F;;AAPzE,AAAA,2GAAA4G,eAAAC,eAAAC,kDAAAF,eAAAC,eAAAC,xNAACpI,sDAAAA,oGAAAA;AASD,IAAA6I,iBAAA;IAAAC,iBACY,WAAK7I;AAAL,AACE,OAAA,wFAAUA;;AAFxB,AAAA,2GAAA4I,eAAAC,kDAAAD,eAAAC,1LAAC9I,sDAAAA,qFAAAA;AAID,IAAA+I,iBAAA;IAAAC,iBACY,WAAK/I;AAAL,AACE,OAAA,gGAAaA;;AAF3B,AAAA,2GAAA8I,eAAAC,kDAAAD,eAAAC,1LAAChJ,sDAAAA,qFAAAA;AAID,IAAAiJ,iBAAA;IAAAC,iBACY,cAAAC,HAAKlJ;AAAL,AAAA,IAAAmJ,aAAAD;QAAA,AAAAvG,4CAAAwG,WAAA,IAAA,/DAAStF;cAAT,AAAAlB,4CAAAwG,WAAA,IAAA,rEAAW9F;AAAX,AACE,IAAM+F,QAAM,AAACjG,4CAAI,AAAA,0FAAWnD,IAAIqD;AAAhC,AAAA,2BAAA,mFAAA,kEAAA,2CAAA,uJAAA,2CAAA,oDACSA,9LAA8B,CAAA,qDAAc+F,yBAAQ/F;;AAH3E,AAAA,2GAAA2F,eAAAC,kDAAAD,eAAAC,1LAAClJ,sDAAAA,qFAAAA;AAKD,IAAAsJ,iBAAA;IAAAC,iBACY,cAAAC,HAAKvJ;AAAL,AAAA,IAAAwJ,aAAAD;QAAA,AAAA5G,4CAAA6G,WAAA,IAAA,/DAAS3F;cAAT,AAAAlB,4CAAA6G,WAAA,IAAA,rEAAWnG;AAAX,AACE,IAAM+F,QAAM,AAACjG,4CAAI,AAAA,0FAAWnD,IAAIqD;AAAhC,AACE+F;;AAHhB,AAAA,2GAAAC,eAAAC,kDAAAD,eAAAC,1LAACvJ,sDAAAA,qFAAAA;AAKD,IAAA0J,iBAAA;IAAAC,iBACY,cAAAC,HAAK3J;AAAL,AAAA,IAAA4J,aAAAD;QAAA,AAAAhH,4CAAAiH,WAAA,IAAA,/DAAS/F;iBAAT,AAAAlB,4CAAAiH,WAAA,IAAA,xEAAWC;AAAX,AACE,OAAC1G,4CAAI,AAAA,yFAAUnD,IAAI6J;;AAFjC,AAAA,2GAAAJ,eAAAC,kDAAAD,eAAAC,1LAAC3J,sDAAAA,qFAAAA","names":["G__28050","G__28051","re-frame.core/reg-sub","db","G__28057","G__28058","G__28059","G__28060","G__28062","G__28063","cljs.core/vals","G__28065","G__28066","cljs.core.get_in","G__28067","G__28068","G__28070","G__28071","G__28073","G__28074","G__28075","G__28076","endless-ships.subs/sort-with-settings","columns","ordering","coll","ordering-prop","cljs.core.sort","item1","item2","item1-prop","item2-prop","cljs.core._EQ_","cljs.core/compare","cljs.core/constantly","G__28079","G__28080","G__28081","G__28082","re-frame.core/subscribe","G__28083","G__28084","G__28089","G__28090","p__28091","vec__28092","cljs.core.nth","all-ships","race-filter","category-filter","license-filter","cljs.core.filter","ship","and__4221__auto__","cljs.core.get","cljs.core/not-any?","license","cljs.core/not","endless-ships.utils.ships/columns","cljs.core.map","G__28101","G__28102","p__28103","vec__28104","_","name","endless-ships.views.utils/kebabize","G__28111","G__28112","G__28114","G__28115","p__28119","vec__28120","ship-name","G__28127","G__28128","p__28129","vec__28131","modification-name","G__28137","G__28138","p__28139","vec__28140","G__28144","G__28145","p__28146","vec__28147","cljs.core.concat","cljs.core.mapcat","cljs.core.reduce","installations","temp__5751__auto__","ship-outfit","p1__28143#","cljs.core/first","cljs.core.conj","cljs.core.sort_by","cljs.core.juxt","p__28150","map__28151","cljs.core/--destructure-map","quantity","p__28152","map__28153","ship-modification","or__4223__auto__","G__28154","G__28155","p__28156","vec__28157","p__28161","map__28162","outfits","cljs.core.into","G__28163","G__28164","p__28166","vec__28167","outfit-type","G__28170","G__28171","G__28172","p__28173","vec__28174","G__28177","G__28178","p__28179","p__28180","vec__28181","vec__28184","endless-ships.utils.outfits/types","endless-ships.utils.outfits/columns-for","G__28187","G__28188","G__28189","p__28190","vec__28191","G__28194","G__28195","p__28196","p__28197","vec__28198","vec__28201","G__28204","G__28205","G__28206","G__28207","G__28208","G__28209","p__28210","vec__28211","style","G__28214","G__28215","p__28216","vec__28217","G__28220","G__28221","p__28222","vec__28223","plugin-key"],"sourcesContent":["(ns endless-ships.subs\n  (:require [re-frame.core :as rf]\n            [endless-ships.utils.ships :as ships]\n            [endless-ships.utils.outfits :as outfits]\n            [endless-ships.views.utils :refer [kebabize]]))\n\n(rf/reg-sub ::loading?\n            (fn [db]\n              (:loading? db)))\n\n(rf/reg-sub ::loading-failed?\n            (fn [db]\n              (:loading-failed? db)))\n\n(rf/reg-sub ::route\n            (fn [db]\n              (:route db)))\n\n(rf/reg-sub ::ships\n            (fn [db]\n              (-> db :ships vals)))\n\n(rf/reg-sub ::ships-ordering\n            (fn [db]\n              (get-in db [:settings :ships :ordering])))\n\n(rf/reg-sub ::ship-filters-collapsed?\n            (fn [db]\n              (get-in db [:settings :ships :filters-collapsed?])))\n\n(rf/reg-sub ::ships-race-filter\n            (fn [db]\n              (get-in db [:settings :ships :race-filter])))\n\n(rf/reg-sub ::ships-category-filter\n            (fn [db]\n              (get-in db [:settings :ships :category-filter])))\n\n(rf/reg-sub ::ships-license-filter\n            (fn [db]\n              (get-in db [:settings :ships :license-filter])))\n\n(defn- sort-with-settings [columns ordering coll]\n  (let [ordering-prop (get-in columns [(:column-name ordering) :value])]\n    (sort (if (some? (:column-name ordering))\n            (fn [item1 item2]\n              (let [item1-prop (ordering-prop item1)\n                    item2-prop (ordering-prop item2)]\n                (if (= (:order ordering) :asc)\n                  (compare item1-prop item2-prop)\n                  (compare item2-prop item1-prop))))\n            (constantly 0))\n          coll)))\n\n(rf/reg-sub ::ship-names\n            (fn []\n              [(rf/subscribe [::ships])\n               (rf/subscribe [::ships-ordering])\n               (rf/subscribe [::ships-race-filter])\n               (rf/subscribe [::ships-category-filter])\n               (rf/subscribe [::ships-license-filter])])\n            (fn [[all-ships ordering race-filter category-filter license-filter]]\n              (->> all-ships\n                   (filter (fn [ship]\n                             (and (get race-filter (:race ship))\n                                  (get category-filter (:category ship))\n                                  (not-any? (fn [license]\n                                              (not (get license-filter license)))\n                                            (get ship :licenses [])))))\n                   (sort-with-settings ships/columns ordering)\n                   (map :name))))\n\n(rf/reg-sub ::ship\n            (fn [db [_ name]]\n              (get-in db [:ships (kebabize name)])))\n\n(rf/reg-sub ::outfits\n            (fn [db]\n              (:outfits db)))\n\n(rf/reg-sub ::ship-modifications-names\n            (fn [db [_ ship-name]]\n              (->> (get-in db [:ship-modifications ship-name])\n                   vals\n                   (map :modification))))\n\n(rf/reg-sub ::ship-modification\n            (fn [db [_ ship-name modification-name]]\n              (get-in db [:ship-modifications ship-name modification-name])))\n\n(rf/reg-sub ::outfit\n            (fn [db [_ name]]\n              (get-in db [:outfits (kebabize name)])))\n\n(rf/reg-sub ::outfit-installations\n            (fn [db [_ name]]\n              (->> (concat (-> db :ships vals)\n                           (->> (:ship-modifications db)\n                                vals\n                                (mapcat vals)))\n                   (reduce (fn [installations ship]\n                             (if-let [ship-outfit (->> (:outfits ship)\n                                                       (filter #(= (:name %) name))\n                                                       first)]\n                               (conj installations\n                                     {:ship-name (:name ship)\n                                      :ship-modification (:modification ship)\n                                      :quantity (:quantity ship-outfit)})\n                               installations))\n                           [])\n                   (sort-by (juxt (fn [{:keys [quantity]}]\n                                    (- quantity))\n                                  (fn [{:keys [ship-name ship-modification]}]\n                                    (or ship-modification ship-name)))))))\n\n(rf/reg-sub ::outfit-planets\n            (fn [db [_ name]]\n              (->> (:outfitters db)\n                   (filter (fn [{:keys [outfits]}]\n                             (outfits name)))\n                   (mapcat :planets)\n                   (into #{})\n                   (sort-by :name))))\n\n(rf/reg-sub ::outfits-ordering\n            (fn [db [_ outfit-type]]\n              (get-in db [:settings outfit-type :ordering])))\n\n(rf/reg-sub ::outfit-names\n            (fn [[_ outfit-type]]\n              [(rf/subscribe [::outfits])\n               (rf/subscribe [::outfits-ordering outfit-type])])\n            (fn [[outfits ordering] [_ outfit-type]]\n              (->> (vals outfits)\n                   (filter (get-in outfits/types [outfit-type :filter]))\n                   (sort-with-settings (outfits/columns-for outfit-type) ordering)\n                   (map :name))))\n\n(rf/reg-sub ::outfits-of-type\n            (fn [[_ outfit-type]]\n              [(rf/subscribe [::outfits])\n               (rf/subscribe [::outfits-ordering outfit-type])])\n            (fn [[outfits ordering] [_ outfit-type]]\n              (->> (vals outfits)\n                   (filter (get-in outfits/types [outfit-type :filter]))\n                   (sort-with-settings (outfits/columns-for outfit-type) ordering))))\n\n(rf/reg-sub ::game-version\n            (fn [db]\n              (:version db)))\n\n(rf/reg-sub ::gw-version\n            (fn [db]\n              (:gw-version db)))\n\n(rf/reg-sub ::license-label\n            (fn [db [_ license]]\n              (let [style (get (:licenses db) license)]\n                ^{:key license} [:span.label {:class (str \"label-\" style)} license])))\n\n(rf/reg-sub ::license-style\n            (fn [db [_ license]]\n              (let [style (get (:licenses db) license)]\n                style)))\n\n(rf/reg-sub ::plugin\n            (fn [db [_ plugin-key]]\n              (get (:plugins db) plugin-key)))\n"]}